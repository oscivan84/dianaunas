{"ast":null,"code":"import Mock from '../mock';\nconst date = new Date();\nconst calendarEventDB = {\n  events: [{\n    id: '344jdfher3wh23',\n    title: 'Meeting with all employees',\n    start: new Date(date.getFullYear(), date.getMonth(), 1),\n    end: new Date(date.getFullYear(), date.getMonth(), 3)\n  }, {\n    id: 'dfdfdsfedrevcr',\n    title: 'A trip to Bali Island',\n    start: new Date(),\n    end: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 2)\n  }]\n};\nMock.onGet('/api/calendar/events/all').reply(config => {\n  return [200, calendarEventDB.events];\n});\nMock.onPost('/api/calendar/events/add').reply(config => {\n  let {\n    start,\n    end,\n    ...others\n  } = JSON.parse(config.data);\n  let event = {\n    start: new Date(start),\n    end: new Date(end),\n    ...others\n  };\n  calendarEventDB.events.push(event);\n  return [200, calendarEventDB.events];\n});\nMock.onPost('/api/calendar/events/update').reply(config => {\n  let updatedEvent = JSON.parse(config.data);\n\n  if (updatedEvent.event) {\n    // resize or move event handling\n    calendarEventDB.events.map(event => {\n      if (event.id === updatedEvent.event.id) {\n        event.start = new Date(updatedEvent.start);\n        event.end = new Date(updatedEvent.end);\n      }\n\n      return event;\n    });\n  } else {\n    calendarEventDB.events.map(event => {\n      if (event.id === updatedEvent.id) {\n        event.start = new Date(updatedEvent.start);\n        event.end = new Date(updatedEvent.end);\n        event.title = updatedEvent.title;\n        event.location = updatedEvent.location;\n        event.note = updatedEvent.note;\n      }\n\n      return event;\n    });\n  }\n\n  return [200, calendarEventDB.events];\n});\nMock.onPost('/api/calendar/events/delete').reply(config => {\n  let event = JSON.parse(config.data);\n  let index = {\n    i: 0\n  };\n  calendarEventDB.events.forEach(element => {\n    if (element.id === event.id) {\n      return [200, calendarEventDB.events.splice(index.i, 1)];\n    }\n\n    index.i++;\n  });\n  return [200, calendarEventDB.events];\n});","map":{"version":3,"sources":["C:/Users/DiazP/Documents/plantilla/src/fake-db/db/calendarEvents.js"],"names":["Mock","date","Date","calendarEventDB","events","id","title","start","getFullYear","getMonth","end","getDate","onGet","reply","config","onPost","others","JSON","parse","data","event","push","updatedEvent","map","location","note","index","i","forEach","element","splice"],"mappings":"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","sourcesContent":["import Mock from '../mock'\r\nconst date = new Date()\r\n\r\nconst calendarEventDB = {\r\n    events: [\r\n        {\r\n            id: '344jdfher3wh23',\r\n            title: 'Meeting with all employees',\r\n            start: new Date(date.getFullYear(), date.getMonth(), 1),\r\n            end: new Date(date.getFullYear(), date.getMonth(), 3),\r\n        },\r\n        {\r\n            id: 'dfdfdsfedrevcr',\r\n            title: 'A trip to Bali Island',\r\n            start: new Date(),\r\n            end: new Date(\r\n                date.getFullYear(),\r\n                date.getMonth(),\r\n                date.getDate() + 2\r\n            ),\r\n        },\r\n    ],\r\n}\r\n\r\nMock.onGet('/api/calendar/events/all').reply((config) => {\r\n    return [200, calendarEventDB.events]\r\n})\r\n\r\nMock.onPost('/api/calendar/events/add').reply((config) => {\r\n    let { start, end, ...others } = JSON.parse(config.data)\r\n    let event = {\r\n        start: new Date(start),\r\n        end: new Date(end),\r\n        ...others,\r\n    }\r\n    calendarEventDB.events.push(event)\r\n    return [200, calendarEventDB.events]\r\n})\r\n\r\nMock.onPost('/api/calendar/events/update').reply((config) => {\r\n    let updatedEvent = JSON.parse(config.data)\r\n\r\n    if (updatedEvent.event) {\r\n        // resize or move event handling\r\n        calendarEventDB.events.map((event) => {\r\n            if (event.id === updatedEvent.event.id) {\r\n                event.start = new Date(updatedEvent.start)\r\n                event.end = new Date(updatedEvent.end)\r\n            }\r\n            return event\r\n        })\r\n    } else {\r\n        calendarEventDB.events.map((event) => {\r\n            if (event.id === updatedEvent.id) {\r\n                event.start = new Date(updatedEvent.start)\r\n                event.end = new Date(updatedEvent.end)\r\n                event.title = updatedEvent.title\r\n                event.location = updatedEvent.location\r\n                event.note = updatedEvent.note\r\n            }\r\n\r\n            return event\r\n        })\r\n    }\r\n\r\n    return [200, calendarEventDB.events]\r\n})\r\n\r\nMock.onPost('/api/calendar/events/delete').reply((config) => {\r\n    let event = JSON.parse(config.data)\r\n\r\n    let index = { i: 0 }\r\n\r\n    calendarEventDB.events.forEach((element) => {\r\n        if (element.id === event.id) {\r\n            return [200, calendarEventDB.events.splice(index.i, 1)]\r\n        }\r\n        index.i++\r\n    })\r\n\r\n    return [200, calendarEventDB.events]\r\n})\r\n"]},"metadata":{},"sourceType":"module"}