{"ast":null,"code":"import _TextField from \"@material-ui/core/esm/TextField\";\nvar _jsxFileName = \"C:\\\\Users\\\\DiazP\\\\Documents\\\\plantilla\\\\src\\\\app\\\\views\\\\material-kit\\\\auto-complete\\\\AutocompleteCombo.jsx\";\nimport React, { Fragment } from 'react';\nimport { Autocomplete, createFilterOptions } from '@material-ui/lab';\nconst suggestions = [{\n  label: 'Afghanistan'\n}, {\n  label: 'Aland Islands'\n}, {\n  label: 'Albania'\n}, {\n  label: 'Algeria'\n}, {\n  label: 'American Samoa'\n}, {\n  label: 'Andorra'\n}, {\n  label: 'Angola'\n}, {\n  label: 'Anguilla'\n}, {\n  label: 'Antarctica'\n}, {\n  label: 'Antigua and Barbuda'\n}, {\n  label: 'Argentina'\n}, {\n  label: 'Armenia'\n}, {\n  label: 'Aruba'\n}, {\n  label: 'Australia'\n}, {\n  label: 'Austria'\n}, {\n  label: 'Azerbaijan'\n}, {\n  label: 'Bahamas'\n}, {\n  label: 'Bahrain'\n}, {\n  label: 'Bangladesh'\n}, {\n  label: 'Barbados'\n}, {\n  label: 'Belarus'\n}, {\n  label: 'Belgium'\n}, {\n  label: 'Belize'\n}, {\n  label: 'Benin'\n}, {\n  label: 'Bermuda'\n}, {\n  label: 'Bhutan'\n}, {\n  label: 'Bolivia, Plurinational State of'\n}, {\n  label: 'Bonaire, Sint Eustatius and Saba'\n}, {\n  label: 'Bosnia and Herzegovina'\n}, {\n  label: 'Botswana'\n}, {\n  label: 'Bouvet Island'\n}, {\n  label: 'Brazil'\n}, {\n  label: 'British Indian Ocean Territory'\n}, {\n  label: 'Brunei Darussalam'\n}];\nconst filter = createFilterOptions();\n\nconst AutocompleteCombo = () => {\n  const [value, setValue] = React.useState(null);\n\n  const handleChange = (event, newValue) => {\n    if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n      return;\n    }\n\n    setValue(newValue);\n  };\n\n  const filterOptions = (options, params) => {\n    const filtered = filter(options, params);\n\n    if (params.inputValue !== '') {\n      filtered.push({\n        inputValue: params.inputValue,\n        label: \"Add \\\"\".concat(params.inputValue, \"\\\"\")\n      });\n    }\n\n    return filtered;\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: \"mb-4 w-300\",\n    options: suggestions,\n    getOptionLabel: option => option.label,\n    renderInput: params => /*#__PURE__*/React.createElement(_TextField, Object.assign({}, params, {\n      label: \"Combo box\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: \"mb-4 w-300\",\n    value: value,\n    onChange: handleChange,\n    filterOptions: filterOptions,\n    options: suggestions,\n    getOptionLabel: option => {\n      // e.g value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      }\n\n      if (option.inputValue) {\n        return option.inputValue;\n      }\n\n      return option.label;\n    },\n    renderOption: option => option.label,\n    style: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/React.createElement(_TextField, Object.assign({}, params, {\n      label: \"Free solo with text demo\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: \"mb-4 w-300\",\n    options: suggestions,\n    getOptionLabel: option => option.label,\n    getOptionDisabled: option => option === suggestions[0] || option === suggestions[2],\n    renderInput: params => /*#__PURE__*/React.createElement(_TextField, Object.assign({}, params, {\n      label: \"Disabled option\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AutocompleteCombo;","map":{"version":3,"sources":["C:/Users/DiazP/Documents/plantilla/src/app/views/material-kit/auto-complete/AutocompleteCombo.jsx"],"names":["React","Fragment","Autocomplete","createFilterOptions","suggestions","label","filter","AutocompleteCombo","value","setValue","useState","handleChange","event","newValue","inputValue","filterOptions","options","params","filtered","push","option","width"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport { Autocomplete, createFilterOptions } from '@material-ui/lab'\r\n\r\nconst suggestions = [\r\n    { label: 'Afghanistan' },\r\n    { label: 'Aland Islands' },\r\n    { label: 'Albania' },\r\n    { label: 'Algeria' },\r\n    { label: 'American Samoa' },\r\n    { label: 'Andorra' },\r\n    { label: 'Angola' },\r\n    { label: 'Anguilla' },\r\n    { label: 'Antarctica' },\r\n    { label: 'Antigua and Barbuda' },\r\n    { label: 'Argentina' },\r\n    { label: 'Armenia' },\r\n    { label: 'Aruba' },\r\n    { label: 'Australia' },\r\n    { label: 'Austria' },\r\n    { label: 'Azerbaijan' },\r\n    { label: 'Bahamas' },\r\n    { label: 'Bahrain' },\r\n    { label: 'Bangladesh' },\r\n    { label: 'Barbados' },\r\n    { label: 'Belarus' },\r\n    { label: 'Belgium' },\r\n    { label: 'Belize' },\r\n    { label: 'Benin' },\r\n    { label: 'Bermuda' },\r\n    { label: 'Bhutan' },\r\n    { label: 'Bolivia, Plurinational State of' },\r\n    { label: 'Bonaire, Sint Eustatius and Saba' },\r\n    { label: 'Bosnia and Herzegovina' },\r\n    { label: 'Botswana' },\r\n    { label: 'Bouvet Island' },\r\n    { label: 'Brazil' },\r\n    { label: 'British Indian Ocean Territory' },\r\n    { label: 'Brunei Darussalam' },\r\n]\r\n\r\nconst filter = createFilterOptions()\r\n\r\nconst AutocompleteCombo = () => {\r\n    const [value, setValue] = React.useState(null)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue && newValue.inputValue) {\r\n            setValue({\r\n                label: newValue.inputValue,\r\n            })\r\n            return\r\n        }\r\n        setValue(newValue)\r\n    }\r\n\r\n    const filterOptions = (options, params) => {\r\n        const filtered = filter(options, params)\r\n        if (params.inputValue !== '') {\r\n            filtered.push({\r\n                inputValue: params.inputValue,\r\n                label: `Add \"${params.inputValue}\"`,\r\n            })\r\n        }\r\n        return filtered\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Autocomplete\r\n                className=\"mb-4 w-300\"\r\n                options={suggestions}\r\n                getOptionLabel={(option) => option.label}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Combo box\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Autocomplete\r\n                className=\"mb-4 w-300\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                filterOptions={filterOptions}\r\n                options={suggestions}\r\n                getOptionLabel={(option) => {\r\n                    // e.g value selected with enter, right from the input\r\n                    if (typeof option === 'string') {\r\n                        return option\r\n                    }\r\n                    if (option.inputValue) {\r\n                        return option.inputValue\r\n                    }\r\n                    return option.label\r\n                }}\r\n                renderOption={(option) => option.label}\r\n                style={{ width: 300 }}\r\n                freeSolo\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Free solo with text demo\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Autocomplete\r\n                className=\"mb-4 w-300\"\r\n                options={suggestions}\r\n                getOptionLabel={(option) => option.label}\r\n                getOptionDisabled={(option) =>\r\n                    option === suggestions[0] || option === suggestions[2]\r\n                }\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Disabled option\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AutocompleteCombo\r\n"]},"metadata":{},"sourceType":"module"}