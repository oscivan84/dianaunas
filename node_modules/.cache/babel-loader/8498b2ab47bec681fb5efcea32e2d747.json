{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DiazP\\\\Documents\\\\plantilla\\\\src\\\\app\\\\views\\\\Drag&Drop\\\\TwoListDnD.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useTheme } from '@material-ui/core/styles'; // fake data generator\n\nconst getItems = function (count) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Array.from({\n    length: count\n  }, (v, k) => k).map(k => ({\n    id: \"item-\".concat(k + offset),\n    content: \"item \".concat(k + offset)\n  }));\n}; // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle, theme) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: \"0 0 \".concat(grid, \"px 0\"),\n  boxShadow: theme.shadows[4],\n  borderRadius: '4px',\n  // change background colour if dragging\n  background: isDragging ? 'rgba(var(--primary),1)' : 'rgba(var(--bg-paper),1)',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  borderRadius: '4px',\n  background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'rgba(var(--bg-default),1)',\n  padding: grid,\n  width: 250\n});\n\nconst TwoListDnD = () => {\n  const [items, setItems] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const theme = useTheme();\n  useEffect(() => {\n    setItems(getItems(10));\n    setSelected(getItems(5, 10));\n  }, []);\n\n  const getList = id => id === 'droppable' ? items : selected;\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\n\n      if (source.droppableId === 'droppable2') {\n        setSelected(items);\n      } else setItems(items);\n    } else {\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n      setItems(result.droppable);\n      setSelected(result.droppable2);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }, items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style, theme),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 41\n    }\n  }), item.content))), provided.placeholder)), /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }, selected.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style, theme),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 41\n    }\n  }), item.content))), provided.placeholder))));\n};\n\nexport default TwoListDnD;","map":{"version":3,"sources":["C:/Users/DiazP/Documents/plantilla/src/app/views/Drag&Drop/TwoListDnD.jsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","useTheme","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","theme","userSelect","padding","margin","boxShadow","shadows","borderRadius","background","getListStyle","isDraggingOver","width","TwoListDnD","items","setItems","selected","setSelected","getList","onDragEnd","droppable","droppable2","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source)\r\n    const destClone = Array.from(destination)\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed)\r\n\r\n    const result = {}\r\n    result[droppableSource.droppableId] = sourceClone\r\n    result[droppableDestination.droppableId] = destClone\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, theme) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    boxShadow: theme.shadows[4],\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging\r\n        ? 'rgba(var(--primary),1)'\r\n        : 'rgba(var(--bg-paper),1)',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver\r\n        ? 'rgba(0,0,0, .1)'\r\n        : 'rgba(var(--bg-default),1)',\r\n    padding: grid,\r\n    width: 250,\r\n})\r\n\r\nconst TwoListDnD = () => {\r\n    const [items, setItems] = useState([])\r\n    const [selected, setSelected] = useState([])\r\n    const theme = useTheme()\r\n\r\n    useEffect(() => {\r\n        setItems(getItems(10))\r\n        setSelected(getItems(5, 10))\r\n    }, [])\r\n\r\n    const getList = (id) => (id === 'droppable' ? items : selected)\r\n\r\n    const onDragEnd = (result) => {\r\n        const { source, destination } = result\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            )\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                setSelected(items)\r\n            } else setItems(items)\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            )\r\n\r\n            setItems(result.droppable)\r\n            setSelected(result.droppable2)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"flex justify-around\">\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}\r\n                        >\r\n                            {items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style,\r\n                                                theme\r\n                                            )}\r\n                                        >\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}\r\n                        >\r\n                            {selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style,\r\n                                                theme\r\n                                            )}\r\n                                        >\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </div>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default TwoListDnD\r\n"]},"metadata":{},"sourceType":"module"}