{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DiazP\\\\Documents\\\\plantilla\\\\src\\\\app\\\\views\\\\Drag&Drop\\\\SimpleHorizontalList.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: \"item-\".concat(k),\n  content: \"item \".concat(k)\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: \"0 \".concat(grid, \"px 0 0\"),\n  boxShadow: 'var(--elevation-z4)',\n  borderRadius: '4px',\n  // change background colour if dragging\n  background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  borderRadius: '4px',\n  background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n  display: 'flex',\n  padding: grid,\n  overflow: 'auto'\n});\n\nconst SimpleHorizontalList = () => {\n  const [item, setItem] = useState([]);\n  useEffect(() => {\n    setItem(getItems(6));\n  }, []);\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const tempItems = reorder(item, result.source.index, result.destination.index);\n    setItem(tempItems);\n  }; // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    direction: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver)\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }), item.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 37\n    }\n  }), item.content))), provided.placeholder)));\n};\n\nexport default SimpleHorizontalList;","map":{"version":3,"sources":["C:/Users/DiazP/Documents/plantilla/src/app/views/Drag&Drop/SimpleHorizontalList.jsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","boxShadow","borderRadius","background","getListStyle","isDraggingOver","display","overflow","SimpleHorizontalList","item","setItem","onDragEnd","destination","tempItems","source","index","provided","snapshot","innerRef","droppableProps","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k}`,\r\n        content: `item ${k}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 ${grid}px 0 0`,\r\n    boxShadow: 'var(--elevation-z4)',\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\r\n    display: 'flex',\r\n    padding: grid,\r\n    overflow: 'auto',\r\n})\r\n\r\nconst SimpleHorizontalList = () => {\r\n    const [item, setItem] = useState([])\r\n\r\n    useEffect(() => {\r\n        setItem(getItems(6))\r\n    }, [])\r\n\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n\r\n        const tempItems = reorder(\r\n            item,\r\n            result.source.index,\r\n            result.destination.index\r\n        )\r\n        setItem(tempItems)\r\n    }\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        style={getListStyle(snapshot.isDraggingOver)}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        {item.map((item, index) => (\r\n                            <Draggable\r\n                                key={item.id}\r\n                                draggableId={item.id}\r\n                                index={index}\r\n                            >\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={getItemStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style\r\n                                        )}\r\n                                    >\r\n                                        {item.content}\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default SimpleHorizontalList\r\n"]},"metadata":{},"sourceType":"module"}