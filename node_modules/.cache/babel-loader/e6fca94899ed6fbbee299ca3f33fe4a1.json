{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\DiazP\\\\Documents\\\\SSmanagm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport Mock from '../mock';\nimport shortId from 'shortid';\nvar NotificationDB = {\n  list: [{\n    id: shortId.generate(),\n    heading: 'Message',\n    icon: {\n      name: 'chat',\n      color: 'primary'\n    },\n    timestamp: 1570702802573,\n    title: 'New message from Devid',\n    subtitle: 'Hello, Any progress...',\n    path: 'chat'\n  }, {\n    id: shortId.generate(),\n    heading: 'Alert',\n    icon: {\n      name: 'notifications',\n      color: 'error'\n    },\n    timestamp: 1570702702573,\n    title: 'Server overloaded',\n    subtitle: 'Traffice reached 2M',\n    path: 'page-layouts/user-profile'\n  }, {\n    id: shortId.generate(),\n    heading: 'Message',\n    icon: {\n      name: 'chat',\n      color: 'primary'\n    },\n    timestamp: 1570502502573,\n    title: 'New message from Goustove',\n    subtitle: 'Hello, send me details',\n    path: 'chat'\n  }]\n};\nMock.onGet('/api/notification').reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost('/api/notification/add').reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost('/api/notification/delete').reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n      id = _JSON$parse.id;\n\n  console.log(config.data);\n  var response = NotificationDB.list.filter(function (notification) {\n    return notification.id !== id;\n  });\n  NotificationDB.list = _toConsumableArray(response);\n  return [200, response];\n});\nMock.onPost('/api/notification/delete-all').reply(function (config) {\n  NotificationDB.list = [];\n  var response = NotificationDB.list;\n  return [200, response];\n});","map":{"version":3,"sources":["C:/Users/DiazP/Documents/SSmanagm/src/fake-db/db/notification.js"],"names":["Mock","shortId","NotificationDB","list","id","generate","heading","icon","name","color","timestamp","title","subtitle","path","onGet","reply","config","response","onPost","JSON","parse","data","console","log","filter","notification"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,CACF;AACIC,IAAAA,EAAE,EAAEH,OAAO,CAACI,QAAR,EADR;AAEIC,IAAAA,OAAO,EAAE,SAFb;AAGIC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE,MADJ;AAEFC,MAAAA,KAAK,EAAE;AAFL,KAHV;AAOIC,IAAAA,SAAS,EAAE,aAPf;AAQIC,IAAAA,KAAK,EAAE,wBARX;AASIC,IAAAA,QAAQ,EAAE,wBATd;AAUIC,IAAAA,IAAI,EAAE;AAVV,GADE,EAaF;AACIT,IAAAA,EAAE,EAAEH,OAAO,CAACI,QAAR,EADR;AAEIC,IAAAA,OAAO,EAAE,OAFb;AAGIC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE,eADJ;AAEFC,MAAAA,KAAK,EAAE;AAFL,KAHV;AAOIC,IAAAA,SAAS,EAAE,aAPf;AAQIC,IAAAA,KAAK,EAAE,mBARX;AASIC,IAAAA,QAAQ,EAAE,qBATd;AAUIC,IAAAA,IAAI,EAAE;AAVV,GAbE,EAyBF;AACIT,IAAAA,EAAE,EAAEH,OAAO,CAACI,QAAR,EADR;AAEIC,IAAAA,OAAO,EAAE,SAFb;AAGIC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE,MADJ;AAEFC,MAAAA,KAAK,EAAE;AAFL,KAHV;AAOIC,IAAAA,SAAS,EAAE,aAPf;AAQIC,IAAAA,KAAK,EAAE,2BARX;AASIC,IAAAA,QAAQ,EAAE,wBATd;AAUIC,IAAAA,IAAI,EAAE;AAVV,GAzBE;AADa,CAAvB;AAyCAb,IAAI,CAACc,KAAL,CAAW,mBAAX,EAAgCC,KAAhC,CAAsC,UAACC,MAAD,EAAY;AAC9C,MAAMC,QAAQ,GAAGf,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMc,QAAN,CAAP;AACH,CAHD;AAKAjB,IAAI,CAACkB,MAAL,CAAY,uBAAZ,EAAqCH,KAArC,CAA2C,UAACC,MAAD,EAAY;AACnD,MAAMC,QAAQ,GAAGf,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMc,QAAN,CAAP;AACH,CAHD;AAKAjB,IAAI,CAACkB,MAAL,CAAY,0BAAZ,EAAwCH,KAAxC,CAA8C,UAACC,MAAD,EAAY;AACtD,oBAAaG,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACK,IAAlB,CAAb;AAAA,MAAMjB,EAAN,eAAMA,EAAN;;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACK,IAAnB;AAEA,MAAMJ,QAAQ,GAAGf,cAAc,CAACC,IAAf,CAAoBqB,MAApB,CACb,UAACC,YAAD;AAAA,WAAkBA,YAAY,CAACrB,EAAb,KAAoBA,EAAtC;AAAA,GADa,CAAjB;AAGAF,EAAAA,cAAc,CAACC,IAAf,sBAA0Bc,QAA1B;AACA,SAAO,CAAC,GAAD,EAAMA,QAAN,CAAP;AACH,CATD;AAWAjB,IAAI,CAACkB,MAAL,CAAY,8BAAZ,EAA4CH,KAA5C,CAAkD,UAACC,MAAD,EAAY;AAC1Dd,EAAAA,cAAc,CAACC,IAAf,GAAsB,EAAtB;AACA,MAAMc,QAAQ,GAAGf,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMc,QAAN,CAAP;AACH,CAJD","sourcesContent":["import Mock from '../mock'\r\nimport shortId from 'shortid'\r\n\r\nconst NotificationDB = {\r\n    list: [\r\n        {\r\n            id: shortId.generate(),\r\n            heading: 'Message',\r\n            icon: {\r\n                name: 'chat',\r\n                color: 'primary',\r\n            },\r\n            timestamp: 1570702802573,\r\n            title: 'New message from Devid',\r\n            subtitle: 'Hello, Any progress...',\r\n            path: 'chat',\r\n        },\r\n        {\r\n            id: shortId.generate(),\r\n            heading: 'Alert',\r\n            icon: {\r\n                name: 'notifications',\r\n                color: 'error',\r\n            },\r\n            timestamp: 1570702702573,\r\n            title: 'Server overloaded',\r\n            subtitle: 'Traffice reached 2M',\r\n            path: 'page-layouts/user-profile',\r\n        },\r\n        {\r\n            id: shortId.generate(),\r\n            heading: 'Message',\r\n            icon: {\r\n                name: 'chat',\r\n                color: 'primary',\r\n            },\r\n            timestamp: 1570502502573,\r\n            title: 'New message from Goustove',\r\n            subtitle: 'Hello, send me details',\r\n            path: 'chat',\r\n        },\r\n    ],\r\n}\r\n\r\nMock.onGet('/api/notification').reply((config) => {\r\n    const response = NotificationDB.list\r\n    return [200, response]\r\n})\r\n\r\nMock.onPost('/api/notification/add').reply((config) => {\r\n    const response = NotificationDB.list\r\n    return [200, response]\r\n})\r\n\r\nMock.onPost('/api/notification/delete').reply((config) => {\r\n    let { id } = JSON.parse(config.data)\r\n    console.log(config.data)\r\n\r\n    const response = NotificationDB.list.filter(\r\n        (notification) => notification.id !== id\r\n    )\r\n    NotificationDB.list = [...response]\r\n    return [200, response]\r\n})\r\n\r\nMock.onPost('/api/notification/delete-all').reply((config) => {\r\n    NotificationDB.list = []\r\n    const response = NotificationDB.list\r\n    return [200, response]\r\n})\r\n"]},"metadata":{},"sourceType":"module"}